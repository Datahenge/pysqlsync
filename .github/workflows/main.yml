---
name: pysqlsync database integration tests

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip --disable-pip-version-check install -r requirements.txt

      - name: Run sanity checks
        run: |
          ./check.sh
  
      - name: Build PyPI package
        run: |
          python -m build

      - name: Save PyPI package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pysqlsync-dist
          path: dist/**
          if-no-files-found: error
          compression-level: 0

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PORT: 5432
          POSTGRES_USER: levente.hunyadi
          POSTGRES_PASSWORD: "<YourStrong@Passw0rd>"
          POSTGRES_DB: levente.hunyadi
        ports:
          - 5432:5432
        # set health checks to wait until PostgreSQL has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

      oracle:
        image: container-registry.oracle.com/database/free:latest
        env:
          ORACLE_PWD: "<YourStrong@Passw0rd>"
        ports:
          - 1521:1521
        # set health checks to wait until Oracle has started
        options: >-
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: "<YourStrong@Passw0rd>"
          MYSQL_DATABASE: levente_hunyadi
        ports:
          - 3306:3306
        # set health checks to wait until MySQL has started
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: "<YourStrong@Passw0rd>"
          SQLCMDPASSWORD: "<YourStrong@Passw0rd>"
        ports:
          - 1433:1433
        # set health checks to wait until Microsoft SQL Server has started
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -Q 'SELECT 1' -b"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

    strategy:
      matrix:
        python-version: ["3.9", "3.12"]

    steps:
      - name: Install Microsoft ODBC
        run: sudo ACCEPT_EULA=Y apt-get install msodbcsql18 -y

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Fetch PyPI package
        uses: actions/download-artifact@v4
        with:
          name: pysqlsync-dist

      - name: Install PyPI package
        run: |
          for FILE in `ls *.whl`; do python -m pip install $FILE'[tsv,postgresql,oracle,mysql,mssql]'; done
  
      - name: Fetch integration tests
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests

      - name: Run integration tests
        run: |
          TEST_INTEGRATION=1 TEST_POSTGRESQL=1 TEST_ORACLE=1 TEST_MYSQL=1 TEST_MSSQL=1 python -m unittest discover
